import React, { useState, useEffect } from 'react';
import ChatInterface from './components/ChatInterface';
import { chatService } from './services/chatService';
import './App.css';

function App() {
  const [messages, setMessages] = useState([]);
  const [sessionId, setSessionId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    // Generate session ID on app start
    const newSessionId = Date.now().toString();
    setSessionId(newSessionId);
  }, []);

  const sendMessage = async (message) => {
    if (!message.trim()) return;

    // Add user message
    const userMessage = {
      id: Date.now(),
      text: message,
      sender: 'user',
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);

    try {
      const response = await chatService.sendMessage(message, sessionId);
      
      // Add bot response
      const botMessage = {
        id: Date.now() + 1,
        text: response.response,
        sender: 'bot',
        timestamp: response.timestamp,
        sqlQuery: response.sql_query,
        rawData: response.raw_data,
        rowCount: response.row_count,
        success: response.success,
        needsRefinement: response.needs_refinement,
        needsConfirmation: response.needs_confirmation,
        interpretedQuestion: response.interpreted_question,
        originalQuestion: message
      };
      
      setMessages(prev => [...prev, botMessage]);
      
      // Update session ID if it was generated by backend
      if (response.session_id && response.session_id !== sessionId) {
        setSessionId(response.session_id);
      }
      
    } catch (error) {
      const errorMessage = {
        id: Date.now() + 1,
        text: `Sorry, I encountered an error: ${error.message}`,
        sender: 'bot',
        timestamp: new Date().toISOString(),
        success: false
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const confirmQuestion = async (confirmed) => {
    try {
      const response = await chatService.confirmQuestion(confirmed, sessionId);
      
      // Add confirmation response
      const confirmMessage = {
        id: Date.now(),
        text: response.response,
        sender: 'bot',
        timestamp: response.timestamp,
        sqlQuery: response.sql_query,
        rawData: response.raw_data,
        rowCount: response.row_count,
        success: response.success,
        needsRefinement: response.needs_refinement
      };
      
      setMessages(prev => [...prev, confirmMessage]);
      
    } catch (error) {
      const errorMessage = {
        id: Date.now(),
        text: `Sorry, I encountered an error: ${error.message}`,
        sender: 'bot',
        timestamp: new Date().toISOString(),
        success: false
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  const refineMessage = async (originalQuestion, feedback) => {
    try {
      const response = await chatService.refineMessage(originalQuestion, feedback, sessionId);
      
      // Add refined response
      const refinedMessage = {
        id: Date.now(),
        text: response.response,
        sender: 'bot',
        timestamp: response.timestamp,
        sqlQuery: response.sql_query,
        rawData: response.raw_data,
        rowCount: response.row_count,
        success: response.success,
        needsRefinement: response.needs_refinement,
        originalQuestion: originalQuestion
      };
      
      setMessages(prev => [...prev, refinedMessage]);
      
    } catch (error) {
      const errorMessage = {
        id: Date.now(),
        text: `Sorry, I couldn't refine the question: ${error.message}`,
        sender: 'bot',
        timestamp: new Date().toISOString(),
        success: false
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  return (
    <div className="App">
      <ChatInterface 
        messages={messages}
        onSendMessage={sendMessage}
        onConfirmQuestion={confirmQuestion}
        onRefineMessage={refineMessage}
        isLoading={isLoading}
      />
    </div>
  );
}

export default App;