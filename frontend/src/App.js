import React, { useState, useEffect } from 'react';
import ChatInterface from './components/ChatInterface';
import LandingPage from './components/LandingPage';
import AdminLogin from './components/AdminLogin';
import AdminPage from './components/AdminPage';
import CCRDeckAssistantPage from './components/CCRDeckAssistantPage';
import { chatService } from './services/chatService';
import './App.css';

function App() {
  const [messages, setMessages] = useState([]);
  const [sessionId, setSessionId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showChat, setShowChat] = useState(false);
  const [showAdmin, setShowAdmin] = useState(false);
  const [showCCRPage, setShowCCRPage] = useState(false);
  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(() => {
    return localStorage.getItem('adminLoggedIn') === 'true';
  });

  useEffect(() => {
    // Generate session ID on app start
    const newSessionId = Date.now().toString();
    setSessionId(newSessionId);
    
    // Check if this is the CCR page based on URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('page') === 'ccr') {
      setShowCCRPage(true);
    }
  }, []);

  const sendMessage = async (message) => {
    if (!message.trim()) return;

    // Clear any pending confirmations by removing messages that need confirmation
    setMessages(prev => prev.filter(msg => !msg.needsConfirmation));

    // Add user message
    const userMessage = {
      id: Date.now(),
      text: message,
      sender: 'user',
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);

    try {
      const response = await chatService.sendMessage(message, sessionId);
      
      // Add bot response
      const botMessage = {
        id: Date.now() + 1,
        text: response.response,
        sender: 'bot',
        timestamp: response.timestamp,
        sqlQuery: response.sql_query,
        rawData: response.raw_data,
        rowCount: response.row_count,
        success: response.success,
        needsRefinement: response.needs_refinement,
        needsConfirmation: response.needs_confirmation,
        interpretedQuestion: response.interpreted_question,
        originalQuestion: message
      };
      
      setMessages(prev => [...prev, botMessage]);
      
      // Update session ID if it was generated by backend
      if (response.session_id && response.session_id !== sessionId) {
        setSessionId(response.session_id);
      }
      
    } catch (error) {
      const errorMessage = {
        id: Date.now() + 1,
        text: `Sorry, I encountered an error: ${error.message}`,
        sender: 'bot',
        timestamp: new Date().toISOString(),
        success: false
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const confirmQuestion = async (confirmed) => {
    try {
      const response = await chatService.confirmQuestion(confirmed, sessionId);
      
      // Find the original user question from the last confirmation request
      const lastConfirmationMessage = messages.slice().reverse().find(m => m.needsConfirmation);
      const originalQuestion = lastConfirmationMessage?.originalQuestion || 'Data analysis query';
      
      // Add confirmation response
      const confirmMessage = {
        id: Date.now(),
        text: response.response,
        sender: 'bot',
        timestamp: response.timestamp,
        sqlQuery: response.sql_query,
        rawData: response.raw_data,
        rowCount: response.row_count,
        success: response.success,
        needsRefinement: response.needs_refinement,
        originalQuestion: originalQuestion,
        dataSources: response.data_sources
      };
      
      setMessages(prev => [...prev, confirmMessage]);
      
    } catch (error) {
      const errorMessage = {
        id: Date.now(),
        text: `Sorry, I encountered an error: ${error.message}`,
        sender: 'bot',
        timestamp: new Date().toISOString(),
        success: false
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  const downloadReport = async (message) => {
    try {
      // Get the original user question from the message or find it from message history
      let userQuestion = message.originalQuestion;
      
      // If no originalQuestion, try to find the most recent user message
      if (!userQuestion) {
        const userMessages = messages.filter(m => m.sender === 'user');
        userQuestion = userMessages.length > 0 ? userMessages[userMessages.length - 1].text : 'Data analysis query';
      }
      
      // Clean the question text to remove any problematic Unicode characters
      userQuestion = userQuestion.replace(/[^\x00-\x7F]/g, '').trim();
      
      const reportData = await chatService.generateReport(
        userQuestion,
        message.sqlQuery,
        message.rawData,
        sessionId
      );
      
      // Import jsPDF dynamically
      const { jsPDF } = await import('jspdf');
      const doc = new jsPDF();
      
      // Set default font
      doc.setFont('helvetica');
      
      // Header with background
      doc.setFillColor(41, 128, 185); // Blue background
      doc.rect(0, 0, 210, 35, 'F');
      
      // Title
      doc.setTextColor(255, 255, 255); // White text
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('Executive Report', 20, 15);
      doc.setFontSize(14);
      doc.setFont('helvetica', 'normal');
      doc.text('Counterparty & Exposure Insights', 20, 25);
      
      // Reset text color
      doc.setTextColor(0, 0, 0);
      let yPos = 50;
      
      // User Question Section
      doc.setFillColor(248, 249, 250); // Light gray background
      doc.rect(15, yPos - 5, 180, 8, 'F');
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(52, 73, 94); // Dark blue-gray
      doc.text('User Question', 20, yPos);
      yPos += 15;
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(11);
      doc.setTextColor(44, 62, 80); // Darker text
      const questionLines = doc.splitTextToSize(reportData.question, 170);
      doc.text(questionLines, 20, yPos);
      yPos += questionLines.length * 6 + 15;
      
      // Data Sources Section
      doc.setFillColor(248, 249, 250);
      doc.rect(15, yPos - 5, 180, 8, 'F');
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(52, 73, 94);
      doc.text('Data Sources', 20, yPos);
      yPos += 15;
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(11);
      doc.setTextColor(44, 62, 80);
      const sources = reportData.data_sources || ['counterparty_new', 'trade_new', 'concentration_new'];
      sources.forEach(source => {
        doc.setFillColor(230, 240, 250); // Light blue background for items
        doc.rect(20, yPos - 3, 160, 6, 'F');
        doc.text(`• ${source}`, 25, yPos);
        yPos += 8;
      });
      yPos += 10;
      
      // Executive Summary Section
      doc.setFillColor(248, 249, 250);
      doc.rect(15, yPos - 5, 180, 8, 'F');
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(52, 73, 94);
      doc.text('Executive Summary', 20, yPos);
      yPos += 15;
      
      // Summary content with border
      doc.setFillColor(255, 248, 220); // Light yellow background
      const summaryHeight = Math.max(20, Math.ceil(reportData.executive_summary.length / 80) * 6);
      doc.rect(20, yPos - 5, 160, summaryHeight, 'F');
      doc.setDrawColor(255, 193, 7); // Yellow border
      doc.rect(20, yPos - 5, 160, summaryHeight, 'S');
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(11);
      doc.setTextColor(44, 62, 80);
      const summaryLines = doc.splitTextToSize(reportData.executive_summary, 150);
      doc.text(summaryLines, 25, yPos + 5);
      yPos += summaryHeight + 15;
      
      // Query Results Section
      if (reportData.raw_data && reportData.raw_data.length > 0) {
        doc.setFillColor(248, 249, 250);
        doc.rect(15, yPos - 5, 180, 8, 'F');
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(52, 73, 94);
        doc.text('Query Results', 20, yPos);
        yPos += 15;
        
        // Table setup
        const headers = Object.keys(reportData.raw_data[0]);
        const colWidth = Math.min(40, 160 / headers.length);
        
        // Table header background
        doc.setFillColor(52, 73, 94); // Dark blue
        doc.rect(20, yPos - 3, 160, 8, 'F');
        
        // Table headers
        doc.setFontSize(9);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(255, 255, 255); // White text
        let xPos = 22;
        headers.forEach(header => {
          const headerText = header.length > 12 ? header.substring(0, 12) + '...' : header;
          doc.text(headerText, xPos, yPos + 2);
          xPos += colWidth;
        });
        yPos += 10;
        
        // Table data with alternating row colors
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8);
        doc.setTextColor(44, 62, 80);
        
        reportData.raw_data.slice(0, 8).forEach((row, index) => {
          // Alternating row background
          if (index % 2 === 0) {
            doc.setFillColor(248, 249, 250);
            doc.rect(20, yPos - 2, 160, 6, 'F');
          }
          
          xPos = 22;
          headers.forEach(header => {
            const value = String(row[header] || '').substring(0, 15);
            doc.text(value, xPos, yPos + 1);
            xPos += colWidth;
          });
          yPos += 6;
        });
        
        if (reportData.raw_data.length > 8) {
          doc.setFont('helvetica', 'italic');
          doc.setTextColor(108, 117, 125);
          doc.text(`... and ${reportData.raw_data.length - 8} more rows`, 22, yPos + 5);
        }
        yPos += 15;
      }
      
      // SQL Query Section (new page if needed)
      if (yPos > 220) {
        doc.addPage();
        doc.setFont('helvetica');
        yPos = 20;
      }
      
      doc.setFillColor(248, 249, 250);
      doc.rect(15, yPos - 5, 180, 8, 'F');
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(52, 73, 94);
      doc.text('SQL Query Executed', 20, yPos);
      yPos += 15;
      
      // SQL code block without background
      doc.setFont('courier', 'normal'); // Monospace font
      doc.setFontSize(10);
      doc.setTextColor(0, 0, 0); // Black text
      const sqlLines = doc.splitTextToSize(reportData.sql_query, 170);
      doc.text(sqlLines, 20, yPos);
      const sqlHeight = sqlLines.length * 6;
      yPos += sqlHeight + 20;
      
      // Footer with border
      doc.setDrawColor(200, 200, 200);
      doc.line(20, yPos - 5, 190, yPos - 5); // Horizontal line
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(9);
      doc.setTextColor(108, 117, 125); // Gray text
      doc.text(`Generated: ${new Date(reportData.generated_at).toLocaleString()}`, 20, yPos + 5);
      doc.text(`Record Count: ${reportData.record_count}`, 20, yPos + 12);
      
      // Download PDF
      doc.save(`executive-report-${Date.now()}.pdf`);
      
    } catch (error) {
      console.error('Error generating report:', error);
      alert('Failed to generate report: ' + error.message);
    }
  };

  const handleFeedback = async (feedbackData) => {
    try {
      // Submit feedback with proper serialization
      const feedbackPayload = {
        messageId: String(feedbackData.messageId),
        type: feedbackData.type,
        feedback: feedbackData.feedback || '',
        originalQuery: feedbackData.originalQuery || '',
        sqlQuery: feedbackData.sqlQuery || '',
        response: feedbackData.response || '',
        sessionId: sessionId
      };
      
      await chatService.submitFeedback(feedbackPayload);
      
      // If negative feedback, process it and get improved response
      if (feedbackData.type === 'down' && feedbackData.feedback && feedbackData.feedback.trim()) {
        const response = await chatService.processWithFeedback(
          feedbackData.originalQuery,
          feedbackData.feedback,
          sessionId
        );
        
        // Add system message about feedback
        const systemMessage = {
          id: Date.now(),
          text: "Thank you for your feedback! I've logged it for training and review. Here's an improved response:",
          sender: 'bot',
          timestamp: new Date().toISOString(),
          success: true
        };
        setMessages(prev => [...prev, systemMessage]);
        
        // Add improved response
        const improvedMessage = {
          id: Date.now() + 1,
          text: response.response,
          sender: 'bot',
          timestamp: response.timestamp,
          sqlQuery: response.sql_query,
          rawData: response.raw_data,
          rowCount: response.row_count,
          success: response.success,
          originalQuestion: feedbackData.originalQuery
        };
        setMessages(prev => [...prev, improvedMessage]);
      } else {
        // Just show thank you message for positive feedback
        const thankYouMessage = {
          id: Date.now(),
          text: "Thank you for the positive feedback! This helps us improve.",
          sender: 'bot',
          timestamp: new Date().toISOString(),
          success: true
        };
        setMessages(prev => [...prev, thankYouMessage]);
      }
    } catch (error) {
      console.error('Feedback error:', error);
      const errorMessage = {
        id: Date.now(),
        text: `Sorry, I couldn't process your feedback: ${error.message || 'Unknown error'}`,
        sender: 'bot',
        timestamp: new Date().toISOString(),
        success: false
      };
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  const refineMessage = async (originalQuestion, feedback) => {
    try {
      const response = await chatService.refineMessage(originalQuestion, feedback, sessionId);
      
      // Add refined response
      const refinedMessage = {
        id: Date.now(),
        text: response.response,
        sender: 'bot',
        timestamp: response.timestamp,
        sqlQuery: response.sql_query,
        rawData: response.raw_data,
        rowCount: response.row_count,
        success: response.success,
        needsRefinement: response.needs_refinement,
        originalQuestion: originalQuestion
      };
      
      setMessages(prev => [...prev, refinedMessage]);
      
    } catch (error) {
      const errorMessage = {
        id: Date.now(),
        text: `Sorry, I couldn't refine the question: ${error.message}`,
        sender: 'bot',
        timestamp: new Date().toISOString(),
        success: false
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  const handleOpenChat = () => {
    setShowChat(true);
  };

  const handleCloseChat = () => {
    setShowChat(false);
  };

  const handleAdminLogin = (success) => {
    if (success) {
      setIsAdminLoggedIn(true);
      setShowAdmin(true);
      localStorage.setItem('adminLoggedIn', 'true');
    }
  };

  const handleAdminLogout = () => {
    setIsAdminLoggedIn(false);
    setShowAdmin(false);
    localStorage.removeItem('adminLoggedIn');
  };

  const handleBackToHome = () => {
    setShowChat(false);
    setShowAdmin(false);
  };

  const handleOpenAdmin = () => {
    if (isAdminLoggedIn) {
      setShowAdmin(true);
    } else {
      setShowAdmin(true);
      setIsAdminLoggedIn(false);
    }
  };

  const handleOpenCCR = () => {
    const ccrUrl = `${window.location.origin}${window.location.pathname}?page=ccr`;
    window.open(ccrUrl, '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');
  };

  return (
    <div className="App">
      {showCCRPage ? (
        <CCRDeckAssistantPage />
      ) : showAdmin ? (
        isAdminLoggedIn ? (
          <AdminPage onLogout={handleAdminLogout} onBackToHome={handleBackToHome} />
        ) : (
          <AdminLogin onLogin={handleAdminLogin} />
        )
      ) : !showChat ? (
        <LandingPage onOpenChat={handleOpenChat} onOpenAdmin={handleOpenAdmin} onOpenCCR={handleOpenCCR} />
      ) : (
        <div className="chat-container">
          <button className="close-chat-btn" onClick={handleCloseChat} title="Back to Home">
            ← Back
          </button>
          <ChatInterface 
            messages={messages}
            onSendMessage={sendMessage}
            onConfirmQuestion={confirmQuestion}
            onRefineMessage={refineMessage}
            onDownloadReport={downloadReport}
            onFeedback={handleFeedback}
            isLoading={isLoading}
          />
        </div>
      )}
    </div>
  );
}

export default App;