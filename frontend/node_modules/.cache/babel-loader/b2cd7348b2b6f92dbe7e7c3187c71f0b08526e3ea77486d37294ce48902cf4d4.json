{"ast":null,"code":"var _jsxFileName = \"/var/www/html/approch2-direct-sql/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ChatInterface from './components/ChatInterface';\nimport { chatService } from './services/chatService';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    // Generate session ID on app start\n    const newSessionId = Date.now().toString();\n    setSessionId(newSessionId);\n  }, []);\n  const sendMessage = async message => {\n    if (!message.trim()) return;\n\n    // Add user message\n    const userMessage = {\n      id: Date.now(),\n      text: message,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      const response = await chatService.sendMessage(message, sessionId);\n\n      // Add bot response\n      const botMessage = {\n        id: Date.now() + 1,\n        text: response.response,\n        sender: 'bot',\n        timestamp: response.timestamp,\n        sqlQuery: response.sql_query,\n        rawData: response.raw_data,\n        rowCount: response.row_count,\n        success: response.success,\n        needsRefinement: response.needs_refinement,\n        originalQuestion: message\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // Update session ID if it was generated by backend\n      if (response.session_id && response.session_id !== sessionId) {\n        setSessionId(response.session_id);\n      }\n    } catch (error) {\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: `Sorry, I encountered an error: ${error.message}`,\n        sender: 'bot',\n        timestamp: new Date().toISOString(),\n        success: false\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const refineMessage = async (originalQuestion, feedback) => {\n    try {\n      const response = await chatService.refineMessage(originalQuestion, feedback, sessionId);\n\n      // Add refined response\n      const refinedMessage = {\n        id: Date.now(),\n        text: response.response,\n        sender: 'bot',\n        timestamp: response.timestamp,\n        sqlQuery: response.sql_query,\n        rawData: response.raw_data,\n        rowCount: response.row_count,\n        success: response.success,\n        needsRefinement: response.needs_refinement,\n        originalQuestion: originalQuestion\n      };\n      setMessages(prev => [...prev, refinedMessage]);\n    } catch (error) {\n      const errorMessage = {\n        id: Date.now(),\n        text: `Sorry, I couldn't refine the question: ${error.message}`,\n        sender: 'bot',\n        timestamp: new Date().toISOString(),\n        success: false\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ChatInterface, {\n      messages: messages,\n      onSendMessage: sendMessage,\n      onRefineMessage: refineMessage,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dqypw2esjecROOa1kAT7hUhQYwk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatInterface","chatService","jsxDEV","_jsxDEV","App","_s","messages","setMessages","sessionId","setSessionId","isLoading","setIsLoading","newSessionId","Date","now","toString","sendMessage","message","trim","userMessage","id","text","sender","timestamp","toISOString","prev","response","botMessage","sqlQuery","sql_query","rawData","raw_data","rowCount","row_count","success","needsRefinement","needs_refinement","originalQuestion","session_id","error","errorMessage","refineMessage","feedback","refinedMessage","className","children","onSendMessage","onRefineMessage","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/var/www/html/approch2-direct-sql/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChatInterface from './components/ChatInterface';\nimport { chatService } from './services/chatService';\nimport './App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    // Generate session ID on app start\n    const newSessionId = Date.now().toString();\n    setSessionId(newSessionId);\n  }, []);\n\n  const sendMessage = async (message) => {\n    if (!message.trim()) return;\n\n    // Add user message\n    const userMessage = {\n      id: Date.now(),\n      text: message,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      const response = await chatService.sendMessage(message, sessionId);\n      \n      // Add bot response\n      const botMessage = {\n        id: Date.now() + 1,\n        text: response.response,\n        sender: 'bot',\n        timestamp: response.timestamp,\n        sqlQuery: response.sql_query,\n        rawData: response.raw_data,\n        rowCount: response.row_count,\n        success: response.success,\n        needsRefinement: response.needs_refinement,\n        originalQuestion: message\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      \n      // Update session ID if it was generated by backend\n      if (response.session_id && response.session_id !== sessionId) {\n        setSessionId(response.session_id);\n      }\n      \n    } catch (error) {\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: `Sorry, I encountered an error: ${error.message}`,\n        sender: 'bot',\n        timestamp: new Date().toISOString(),\n        success: false\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refineMessage = async (originalQuestion, feedback) => {\n    try {\n      const response = await chatService.refineMessage(originalQuestion, feedback, sessionId);\n      \n      // Add refined response\n      const refinedMessage = {\n        id: Date.now(),\n        text: response.response,\n        sender: 'bot',\n        timestamp: response.timestamp,\n        sqlQuery: response.sql_query,\n        rawData: response.raw_data,\n        rowCount: response.row_count,\n        success: response.success,\n        needsRefinement: response.needs_refinement,\n        originalQuestion: originalQuestion\n      };\n      \n      setMessages(prev => [...prev, refinedMessage]);\n      \n    } catch (error) {\n      const errorMessage = {\n        id: Date.now(),\n        text: `Sorry, I couldn't refine the question: ${error.message}`,\n        sender: 'bot',\n        timestamp: new Date().toISOString(),\n        success: false\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <ChatInterface \n        messages={messages}\n        onSendMessage={sendMessage}\n        onRefineMessage={refineMessage}\n        isLoading={isLoading}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}