{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const chatService = {\n  async sendMessage(message, sessionId = null) {\n    try {\n      const response = await api.post('/chat', {\n        message,\n        session_id: sessionId\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Failed to send message');\n    }\n  },\n  async getSessionHistory(sessionId) {\n    try {\n      const response = await api.get(`/sessions/${sessionId}/history`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Failed to get session history');\n    }\n  },\n  async refreshSchema() {\n    try {\n      const response = await api.post('/schema/refresh');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || 'Failed to refresh schema');\n    }\n  },\n  async confirmQuestion(confirmed, sessionId) {\n    try {\n      const response = await api.post('/confirm', {\n        confirmed: confirmed,\n        session_id: sessionId\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || 'Failed to confirm question');\n    }\n  },\n  async refineMessage(originalQuestion, feedback, sessionId) {\n    try {\n      const response = await api.post('/refine', {\n        original_question: originalQuestion,\n        feedback: feedback,\n        session_id: sessionId\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.detail) || 'Failed to refine message');\n    }\n  },\n  async healthCheck() {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Backend service unavailable');\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","chatService","sendMessage","message","sessionId","response","post","session_id","data","error","_error$response","_error$response$data","Error","detail","getSessionHistory","get","_error$response2","_error$response2$data","refreshSchema","_error$response3","_error$response3$data","confirmQuestion","confirmed","_error$response4","_error$response4$data","refineMessage","originalQuestion","feedback","original_question","_error$response5","_error$response5$data","healthCheck"],"sources":["/var/www/html/approch2-direct-sql/frontend/src/services/chatService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const chatService = {\n  async sendMessage(message, sessionId = null) {\n    try {\n      const response = await api.post('/chat', {\n        message,\n        session_id: sessionId\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to send message');\n    }\n  },\n\n  async getSessionHistory(sessionId) {\n    try {\n      const response = await api.get(`/sessions/${sessionId}/history`);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to get session history');\n    }\n  },\n\n  async refreshSchema() {\n    try {\n      const response = await api.post('/schema/refresh');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to refresh schema');\n    }\n  },\n\n  async confirmQuestion(confirmed, sessionId) {\n    try {\n      const response = await api.post('/confirm', {\n        confirmed: confirmed,\n        session_id: sessionId\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to confirm question');\n    }\n  },\n\n  async refineMessage(originalQuestion, feedback, sessionId) {\n    try {\n      const response = await api.post('/refine', {\n        original_question: originalQuestion,\n        feedback: feedback,\n        session_id: sessionId\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to refine message');\n    }\n  },\n\n  async healthCheck() {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Backend service unavailable');\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}